//go:generate mockery -dir=../vendor/github.com/aws/aws-sdk-go/service/route53/route53iface -name Route53API -note 'GENERATED BY MOCKERY: DO NOT EDIT!'

package route53

import (
	"log"
	"net/url"
	"testing"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/route53"
	"github.com/gliderlabs/registrator/bridge"
	"github.com/gliderlabs/registrator/route53/mocks"
	uuid "github.com/satori/go.uuid"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
)

func TestNotUpdatingExistingServices(t *testing.T) {
	r53 := &mocks.Route53API{}
	assert.NotNil(t, r53)
	assert.NoError(t, nil)

	SetupMock(r53)

	adapterURI := `route53://SomeZone?recordPerHost=true&localarecord=true&publicarecord=true&useEC2MetadataForHostname=false`

	uri, err := url.Parse(adapterURI)
	require.NoError(t, err, "bad adapter uri: "+adapterURI)

	factory, found := bridge.AdapterFactories.Lookup(uri.Scheme)
	require.True(t, found, "unrecognized adapter: "+adapterURI)

	registry := factory.New(uri)
	registry.(*Route53Registry).client = r53
	registry.Ping()

	log.Println("Getting services")
	services, err := registry.Services()
	require.NoError(t, err, "Failed getting services")

	log.Println("Got services")
	for _, service := range services {
		log.Println("service", service.ID)
	}

	service := &bridge.Service{
		ID:    uuid.NewV4().String(),
		Name:  "Testing",
		TTL:   TTL,
		IP:    "169.254.169.254",
		Port:  9090,
		Attrs: map[string]string{},
	}
	err = registry.Register(service)
	require.NoError(t, err, "failed registering")

	err = registry.Register(service)
	require.NoError(t, err, "failed registering")

}

func SetupMock(r53 *mocks.Route53API) {

	r53.On("GetHostedZone", mock.Anything).Return(
		&route53.GetHostedZoneOutput{
			HostedZone: &route53.HostedZone{
				Name: aws.String("TestZone"),
			},
		},
		nil,
	)

	r53.On("ChangeResourceRecordSets", mock.Anything).Return(
		&route53.ChangeResourceRecordSetsOutput{
			ChangeInfo: &route53.ChangeInfo{
				Id:     aws.String(`aasdf`),
				Status: aws.String(route53.ChangeStatusInsync),
			},
		},
		nil,
	)

	r53.On("ListResourceRecordSets", mock.Anything).Return(
		&route53.ListResourceRecordSetsOutput{
			ResourceRecordSets: []*route53.ResourceRecordSet{
				{
					Type: aws.String(route53.RRTypeTxt),
					TTL:  aws.Int64(TTL),
					ResourceRecords: []*route53.ResourceRecord{
						{
							Value: aws.String(`"abice-retina16.local:ecs-fluentd-aggr-13-fluentd-aggr-94afb48098c198da3100:24225|10.174.50.251|54.202.28.23|fluentd-aggr"`),
						},
						{
							Value: aws.String(`"abice-retina16.local:ecs-fluentd-beats-aggr-11-fluentd-beats-aggr-aefabbb9ebd8c0a49701:5044|10.174.50.251|54.202.28.23|fluentbeats"`),
						},
						{
							Value: aws.String(`"abice-retina16.local:ecs-fluentd-beats-aggr-11-fluentd-beats-aggr-b091c8c3f5c1c4e3fa01:5044|10.174.50.251|54.202.28.23|fluentbeats"`),
						},
						{
							Value: aws.String(`"abice-retina16.local:ecs-fluentd-beats-aggr-11-fluentd-beats-aggr-96af90f5e8fcd387bd01:5044|10.174.50.251|54.202.28.23|fluentbeats"`),
						},
						{
							Value: aws.String(`"abice-retina16.local:ecs-fluentd-beats-aggr-11-fluentd-beats-aggr-c486c897ad8695c42500:5044|10.174.50.251|54.202.28.23|fluentbeats"`),
						},
						{
							Value: aws.String(`"abice-retina16.local:ecs-fluentd-beats-aggr-11-fluentd-beats-aggr-dcc1cced84dfae88f801:5044|10.174.50.251|54.202.28.23|fluentbeats"`),
						},
						{
							Value: aws.String(`"abice-retina16.local:ecs-fluentd-aggr-14-fluentd-aggr-a2a5f2cbd4f2b7fe9701:24225|10.174.50.251|54.202.28.23|fluentd-aggr"`),
						},
						{
							Value: aws.String(`"abice-retina16.local:ecs-fluentd-aggr-14-fluentd-aggr-ec81abd5a89fabeb7300:24225|10.174.50.251|54.202.28.23|fluentd-aggr"`),
						},
					},
				},
				{
					Type: aws.String(route53.RRTypeTxt),
					TTL:  aws.Int64(TTL),
					ResourceRecords: []*route53.ResourceRecord{
						{
							Value: aws.String(`"ip-10-177-102-223:ecs-fluentd-beats-aggr-prod-7-fluentd-beats-aggr-cef88bbd87f48ead8101:5044|10.177.102.223|54.245.2.136|fluentbeats"`),
						},
						{
							Value: aws.String(`"ip-10-177-102-223:ecs-fluentd-aggr-prod-7-fluentd-aggr-9c91e387def9b5934f00:24225|10.177.102.223|54.245.2.136|fluentbeats"`),
						},
					},
				},
				{
					Type: aws.String(route53.RRTypeTxt),
					TTL:  aws.Int64(TTL),
					ResourceRecords: []*route53.ResourceRecord{
						{
							Value: aws.String(`"ip-10-177-102-56:ecs-fluentd-beats-aggr-prod-7-fluentd-beats-aggr-8abcaebec5bc9aebea01:5044|10.177.102.56|54.191.230.194|fluentbeats"`),
						},
						{
							Value: aws.String(`"ip-10-177-102-56:ecs-fluentd-aggr-prod-7-fluentd-aggr-e6b7e190f59cecf36a00:24225|10.177.102.56|54.191.230.194|fluentbeats"`),
						},
					},
				},
				{
					Type: aws.String(route53.RRTypeTxt),
					TTL:  aws.Int64(TTL),
					ResourceRecords: []*route53.ResourceRecord{
						{
							Value: aws.String(`"ip-10-177-104-17:ecs-fluentd-beats-aggr-prod-7-fluentd-beats-aggr-b2edd889b891e0dbe801:5044|10.177.104.17|54.201.12.106|fluentbeats"`),
						},
						{
							Value: aws.String(`"ip-10-177-104-17:ecs-fluentd-aggr-prod-7-fluentd-aggr-829cfe87c78694e4c101:24225|10.177.104.17|54.201.12.106|fluentbeats"`),
						},
					},
				},
			},
		},
		nil,
	)
}
